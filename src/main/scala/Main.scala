package aoc

object Main {
  def main(args: Array[String]): Unit = {
    val daysToRunAll = for (d <- 1 to 25; p <- 1 to 2) yield s"${d}/${p}"
    val daysToRun = if (args.isEmpty) daysToRunAll else args.toList 

    if (daysToRun.contains("1/1")) println(s"Day01: Part1: captcha -> ${Day01.Part1.solve(Day01.input)}")
    if (daysToRun.contains("1/2")) println(s"Day01: Part2: captcha -> ${Day01.Part2.solve(Day01.input)}")
    if (daysToRun.contains("2/1")) println(s"Day02: Part1: checksum -> ${Day02.Part1.solve(Day02.input)}")
    if (daysToRun.contains("2/2")) println(s"Day02: Part2: checksum -> ${Day02.Part2.solve(Day02.input)}")
    if (daysToRun.contains("3/1")) println(s"Day03: Part1: distance -> ${Day03.Part1.solve(Day03.input)}")
    if (daysToRun.contains("3/2")) println(s"Day03: Part2: number -> ${Day03.Part2.solve(Day03.input)}")
    if (daysToRun.contains("4/1")) println(s"Day04: Part1: countvalid -> ${Day04.Part1.solve(Day04.input)}")
    if (daysToRun.contains("4/2")) println(s"Day04: Part2: countvalid -> ${Day04.Part2.solve(Day04.input)}")
    if (daysToRun.contains("5/1")) println(s"Day05: Part1: countsteps -> ${Day05.Part1.solve(Day05.input)}")
    if (daysToRun.contains("5/2")) println(s"Day05: Part2: countsteps -> ${Day05.Part2.solve(Day05.input)}")
    if (daysToRun.contains("6/1")) println(s"Day06: Part1: cycles -> ${Day06.Part1.solve(Day06.input)}")
    if (daysToRun.contains("6/2")) println(s"Day06: Part2: cycles -> ${Day06.Part2.solve(Day06.input)}")
    if (daysToRun.contains("7/1")) println(s"Day07: Part1: findroot -> ${Day07.Part1.solve(Day07.input)}")
    if (daysToRun.contains("7/2")) println(s"Day07: Part2: correctweight -> ${Day07.Part2.solve(Day07.input)}")
    if (daysToRun.contains("8/1")) println(s"Day08: Part1: maxregister -> ${Day08.Part1.solve(Day08.input)}")
    if (daysToRun.contains("8/2")) println(s"Day08: Part2: maxregisters -> ${Day08.Part2.solve(Day08.input)}")
    if (daysToRun.contains("9/1")) println(s"Day09: Part1: score -> ${Day09.Part1.solve(Day09.input)}")
    if (daysToRun.contains("9/2")) println(s"Day09: Part2: chars -> ${Day09.Part2.solve(Day09.input)}")
    if (daysToRun.contains("10/1")) println(s"Day10: Part1: knot -> ${Day10.Part1.solve(Day10.input)}")
    if (daysToRun.contains("10/2")) println(s"Day10: Part2: hash -> ${Day10.Part2.solve(Day10.input)}")
    if (daysToRun.contains("11/1")) println(s"Day11: Part1: steps -> ${Day11.Part1.solve(Day11.input)}")
    if (daysToRun.contains("11/2")) println(s"Day11: Part2: max -> ${Day11.Part2.solve(Day11.input)}")
    if (daysToRun.contains("12/1")) println(s"Day12: Part1: programs -> ${Day12.Part1.solve(Day12.input)}")
    if (daysToRun.contains("12/2")) println(s"Day12: Part2: groups -> ${Day12.Part2.solve(Day12.input)}")
    if (daysToRun.contains("13/1")) println(s"Day13: Part1: score -> ${Day13.Part1.solve(Day13.input)}")
    if (daysToRun.contains("13/2")) println(s"Day13: Part2: pass -> ${Day13.Part2.solve(Day13.input)}")
    if (daysToRun.contains("14/1")) println(s"Day14: Part1: used -> ${Day14.Part1.solve(Day14.input)}")
    if (daysToRun.contains("14/2")) println(s"Day14: Part2: regions -> ${Day14.Part2.solve(Day14.input)}")
    if (daysToRun.contains("15/1")) println(s"Day15: Part1: count -> ${Day15.Part1.solve}")
    if (daysToRun.contains("15/2")) println(s"Day15: Part2: count -> ${Day15.Part2.solve}")
    if (daysToRun.contains("16/1")) println(s"Day16: Part1: moves -> ${Day16.Part1.solve(Day16.input)}")
    if (daysToRun.contains("16/2")) println(s"Day16: Part2: dance -> ${Day16.Part2.solve(Day16.input)}")
    if (daysToRun.contains("17/1")) println(s"Day17: Part1: next -> ${Day17.Part1.solve(Day17.steps, Day17.times)}")
    if (daysToRun.contains("17/2")) println(s"Day17: Part2: zero -> ${Day17.Part2.solve(Day17.steps, Day17.times2)}")
    if (daysToRun.contains("18/1")) println(s"Day18: Part1: frequency -> ${Day18.Part1.solve(Day18.input)}")
    if (daysToRun.contains("18/2")) println(s"Day18: Part2: deadlock -> ${Day18.Part2.solve(Day18.input)}")
    if (daysToRun.contains("19/1")) println(s"Day19: Part1: path -> ${Day19.Part1.solve(Day19.input)}")
    if (daysToRun.contains("19/2")) println(s"Day19: Part2: steps -> ${Day19.Part2.solve(Day19.input)}")
    if (daysToRun.contains("20/1")) println(s"Day20: Part1: findclosest -> ${Day20.Part1.solve(Day20.input)}")
    if (daysToRun.contains("20/2")) println(s"Day20: Part2: nocollisions -> ${Day20.Part2.solve(Day20.input)}")
    if (daysToRun.contains("21/1")) println(s"Day21: Part1: after5 -> ${Day21.Part1.solve(Day21.input)}")
    if (daysToRun.contains("21/2")) println(s"Day21: Part2: after18 -> ${Day21.Part2.solve(Day21.input)}")
    if (daysToRun.contains("22/1")) println(s"Day22: Part1: simple -> ${Day22.Part1.solve(Day22.input)}")
    if (daysToRun.contains("22/2")) println(s"Day22: Part2: advanced -> ${Day22.Part2.solve(Day22.input)}")
    if (daysToRun.contains("23/1")) println(s"Day23: Part1: run -> ${Day23.Part1.solve(Day23.input)}")
    if (daysToRun.contains("23/2")) println(s"Day23: Part2: run -> ${Day23.Part2.solve(Day23.input)}")
    if (daysToRun.contains("24/1")) println(s"Day24: Part1: strongest -> ${Day24.Part1.solve(Day24.input)}")
    if (daysToRun.contains("24/2")) println(s"Day24: Part2: longest -> ${Day24.Part2.solve(Day24.input)}")
    if (daysToRun.contains("25/1")) println(s"Day25: Part1: run -> ${Day25.Part1.solve(Day25.input)}")
  }
}
